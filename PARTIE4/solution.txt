Analysons les fichiers classes.csv et paquets.csv obtenus à partir du code JFreeChart.Remarquons que le code à analyser représente une bibliothèque de graphiques. Chaque classe Java contient 30-40 lignes de commentaires avec des informations sur les droits d’auteurs et les mise à jours des classes. Si la classe est courte et inclut seulement quelques lignes de code, cela donne une valeur pour classe_DC trop élevée. Nous pouvons en déduire que la métrique classe_DC ne donne pas toujours un indicateur précis de la vraie densité des commentaires. La métrique WMC nous indique la complexité d’une classe. Si la valeur est élevée, on considère qu'une classe est plus difficile à maintenir, réutiliser et étendre. Une complexité élevée nécessite un nombre suffisant de commentaires qui décrivent les classes et les méthodes. Alors, une valeur élevée pour WMC requiert une densité suffisante de commentaires. Nous allons considérer que le code le moins bien commenté est le code avec la densité de commentaires la plus faible, mais qui comporte quand même une complexité supérieure à zéro. Par exemple, on aurait pu choisir la classe "module-info.java" mais comme elle n'est constituée que d'une liste de paquets, donc elle n'a pas de complexité. Nous allons donc choisir les classes #2, #3 et #4#  chemin                               classe                      classe_LOC          classe_CLOC         classe_DC       WMC     classe_BC1  .\main\java\                         module-info.java            40                  3                   0,075   0       0       02  .\main\java\org\jfree\chart\axis\    NumberTickUnitSource.java   168                 57                  0,3392857       39      0,0086996333  .\main\java\org\jfree\chart\block\   BorderArrangement.java      382                 130                 0,34031415      71      0,0047931574  .\main\java\org\jfree\chart\swing\   CrosshairOverlay.java       399                 173                 0,43358395      75      0,005781119Il est à noter que la métrique BC n'est pas un bon indicateur d'un code bien commenté. Il est difficile d'interpréter la valeur de BC pour en tirer une conclusion. Le problème réside dans le fait que DC est une densité qui tient en compte la longueur du code, tandis que WMC ne tient pas en compte la longueur du code. Il est normal qu'une classe avec plus de lignes ait plus de chances d'être complexe. Il faudrait donc créer une nouvelle métrique "ComplexiteRelative = WMC/LOC" pour avoir une mesure de la complexité relative à la longueur du code. On peut ensuite calculer la densité par rapport à la complexité relative, ce qui revient à calculer CLOC/WMC. On pourrait appeler cette métrique BC2. Si on trie les classes selon cette nouvelle métrique BC2, on obtient les mêmes 3 classes qu'on avait choisies précédemment:classe                      BC2NumberTickUnitSource.java   1,4615384BorderArrangement.java      1,83098599CrosshairOverlay.java       2,306666614Par observation, on voit que nos hypothèses se confirment lorsqu'on regarde le code de la  classe NumberTickUnitSource. En effet, ce code contient un nombre important de méthodes qui ne sont pas commentées. On recommande donc d'ajouter des commentaires pour expliquer le rôle de chaque méthode et chaque prédicat dont l'utilisation et le rôle pourraient être ambigus.Passons à l'analyse des paquets. Remarquons la particularité du calcul des métriques pour les paquets. Paquet_DC reflet la densité des commentaires pour un paquet (mais pas les sous-paquets). Lors du calcul de WCP on prend un compte des WCP des sous-paquets. Alors, on trouve que la métrique paquet_BC est incohérente, car on ne travaille pas sur les mêmes données. On choisit donc les paquets moins bien commentés selon la densité des commentaires pour un paquet. Nous avons exclu le paquet jfreechart.src.main qui inclut seulement un fichier Java avec la module JFreeChart.#  paquet                                                       paquet_DC1  jfreechart.src.main.java.org.jfree.chart.plot.flow           0,613360352  jfreechart.src.main.java.org.jfree.chart.internal            0,81552593  jfreechart.src.main.java.org.jfree.chart.swing.editor        0,82428116